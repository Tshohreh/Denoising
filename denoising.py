# -*- coding: utf-8 -*-
"""Denoising.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t2q6mk9Pt5UxXNzwMIqMsSy9PWGmYlmL

# ***Denoising***
"""

import nibabel as nib
import numpy as np
from scipy.ndimage import gaussian_filter
from google.colab import drive
drive.mount('/content/drive', force_remount=True)
import matplotlib.pyplot as plt

# Load the NIfTI image
nifti_output_path_1 = "/content/drive/My Drive/Datasets/nifti/output.nii.gz"
nifti_img = nib.load(nifti_output_path_1)

# Get the data array from the NIfTI image
data = nifti_img.get_fdata()

# Choose a slice to display (e.g., the middle slice along the z-axis)
slice_index = data.shape[-1] // 2

# Plot the slice
plt.imshow(data[:, :, slice_index], cmap='gray')
plt.axis('off')
plt.title('MRI Image')
plt.show()

"""# ***Gaussian filter***

This method involves convolving the image with a Gaussian kernel to smooth out noise while preserving image features. It is effective for reducing Gaussian-distributed noise.
"""

def denoise_nifti(data ,nifti_img , sigma):

    # Apply Gaussian filter for denoising
    denoised_data = gaussian_filter(data, sigma)

    # Create a new NIfTI image with the denoised data
    new_nii_img = nib.Nifti1Image(denoised_data, nifti_img.affine)

    return new_nii_img

# Define the standard deviation of the Gaussian kernel for denoising
sigma = 1.0  # Adjust sigma value as needed

denoised_nifti = denoise_nifti(data,nifti_img, sigma)
#nib.save(denoised_nifti, output_nifti_file)
denoised_data = denoised_nifti.get_fdata()
plt.imshow(denoised_data[:, :, denoised_data.shape[2] // 2], cmap='gray')
plt.title('Denoised MRI Image')
plt.axis('off')
plt.show()

"""# ***Median filtering***
 Median filtering replaces each pixel's value with the median value in its neighborhood. It is effective for removing salt-and-pepper noise without blurring edges.
"""

from scipy.ndimage import median_filter
def median_denoising(data ,nifti_img , size):
    denoised_data = median_filter(data, size=size)
    denoised_nii_img = nib.Nifti1Image(denoised_data, nifti_img.affine)
    return denoised_nii_img

#output_nifti_file = "median_denoised_output.nii.gz"
size = 3  # Adjust filter size as needed
denoised_nifti = median_denoising(data,nifti_img, size)
denoised_data = denoised_nifti.get_fdata()
#nib.save(denoised_nifti, output_nifti_file)
plt.imshow(denoised_data[:, :, denoised_data.shape[2] // 2], cmap='gray')
plt.title('Denoised MRI Image')
plt.axis('off')
plt.show()

"""# **Total Variation (TV) Denoising**: TV denoising minimizes the total variation of the image while preserving edges. It is effective for removing Gaussian and Poisson noise while preserving sharp edges."""

from skimage.restoration import denoise_tv_chambolle

def tv_denoising(data, nifti_img , weight):

    denoised_data = denoise_tv_chambolle(data, weight=weight)
    denoised_nii_img = nib.Nifti1Image(denoised_data, nifti_img.affine)
    return denoised_nii_img


weight = 0.1  # Adjust weight parameter as needed
denoised_nifti = tv_denoising(data, nifti_img, weight)
#nib.save(denoised_nifti, output_nifti_file)
denoised_data = denoised_nifti.get_fdata()
#nib.save(denoised_nifti, output_nifti_file)
plt.imshow(denoised_data[:, :, denoised_data.shape[2] // 2], cmap='gray')
plt.title('Denoised MRI Image')
plt.colorbar()
plt.show()